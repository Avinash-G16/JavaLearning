--------------------Introduction
-ORM Framework - Object Relational Mapping
-Connectors


--------------------Prerequisites for Hibernate
-Core java
-SQL Concepts
-JDBC


--------------------Hibernate Theory
-Java (Variable, Objects) (Temporary storage)
-Hibernate----> Persistence of data (Storing the data into db)
-To connect Java app with DB - JDBC
-Hibernate is one of the tool to Implement ORM concept (some other tools - iBatis, JPA(Standard), TopLink)


--------------------Practical
-HibernateDemo
-mysql and hibernate maven dependencies
-SessionFactory


--------------------How to add Hibernate Plugin in Eclipse
-JBoss downloading from Eclipse marketplace


--------------------Configuration File
-Hibernate.cfg.xml File
-update property in xml File


--------------------Working
-HibernateDemo Project


--------------------Show SQL Property
-show_sql property in xml File


--------------------Annotation 
-@Entity(name="table_name")
-@Id
-@Table
-Difference between @Entity and @Table
-@Column(name="column_name")
-@Transient - it will not be stored into db, it is for Tmeporary data 


--------------------Fetching Data Using Hibernate 
-Session.get() method


--------------------How to use Embeddable Object 
-@Embeddable


--------------------Mapping Relations Theory
-@OneToOne
-@OneToMany<->
-@ManyToOne<->
-@ManyToMany
-@OneToMany
-(MappedBy"") property


--------------------Mapping Relations Practical
-HibernateDemo Project


--------------------Fetch EAGER LAZY
-HibernateDemo Project
-By default fetch type is LAZY


--------------------Hibernate Caching 
-Instead of hitting the db again and again for the same data fetching/access in same session(First level cache)(It is given by hibernate by default) , 2 different sessions (Second level cache)(we need to configure this by using third party library - ehcache (most prefered)/os/swarm), store that data into hibernate cache for fast access
-For configuration - ehcache jar file (pom.xml), hibernate-cache jar file(pom.xml), hibernate.cfg.xml file, two annotations for entity - @cachable (to make entity cachable), @cache (for caching stratagies)


--------------------Caching Level 1
-HibernateDemo Project


--------------------Caching Level 2
-HibernateDemo Project
-ehcache and hibernate ehcache dependencies, update hibernate.cfg.xml


--------------------Caching Level 2 with Query
-HibernateDemo Project


--------------------Hibernate Query Language Theory (HQL)
-HQL returns list of results


--------------------Hibernate Query Language (HQL) part 1
-Query q = session.createQuery("from Student");
 List<Student> students = q.list(); //for full table (all rows)
 for(Student s : students)
 {
    System.out.println(s);
 }
-Query q = session.createQuery("from Student where marks > 50");
-Query q = session.createQuery("from Student where rollno = 6");
 Student stud = (Student)q.uniqueResult();


--------------------Hibernate Query Language (HQL) part 2
-Query q = session.createQuery("select rollno, name, marks from Student where rollno = 6");
 Object[] student = (Object[])q.uniqueResult();//for 1 row
 for(Object o : student)
 {
    System.out.println(o);
 }
 or
 System.out.println(student[0] + " " + student[1] + " " + student[2]);
-int b = 60;
 Query q = session.createQuery("select sum(marks) from Student s where s.marks > : b");
 q.setParameter("b", b); //positional parameter


--------------------Hibernate Query Language (HQL) part 3
-SQL in hibernate
-Native queries
-SQLQuery query = session.createSQLQuery("select * from student where marks > 60");
 query.addEntity(Student.class);
 List<Student> students = query.list();
 for(Student s : student)
 {
    System.out.println(s);
 }
-SQLQuery query = session.createSQLQuery("Select name, marks from student where marks > 60");
 query.setResultTransformer(Criteria.ALIAS_TO_ENTITY_MAP);
 List student = query.list();
 for(Object o : student)
 {
    Map m = (Map)o;
    System.out.println(m.get("name")+ " "+ m.get("marks"));
 }


--------------------Hibernate Object States Persistence Life Cycle
-Transient state
-Persistent state
-Detached state
-Removed state


--------------------Hibernate Object States  (Practical)
-.save() or .persist() -> Persistent state
-.detach() or .evict() -> Detached state
-.delete() or .remove() -> Removed state


--------------------Hibernate Get vs Load
-.get() hits the database while .load() does not, when we use object with this, it will hit the database
-.load() gives the proxy object
-.get() gives nullpointerexception while .load() gives objectnotfoundexception
-to use fake/proxy object use - .load()


--------------------What is JPA? & JPA Implementation
-JPA - Java Persistence Api
-Common standard/specification for ORM frameworks which is implemented by hibernate/ibatis like ORM frameworks
-find(classname, id); method