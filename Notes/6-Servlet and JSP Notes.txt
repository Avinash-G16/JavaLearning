--------------------Introduction to Servlet
-Client ->Request-> Server ->Response-> Client
-Servlets are the java files/functionalality which can take the request from the client and it can process that request and can provide Response
-Request from servlet goes to web container(Helper class)(For Example - Tomcat)
-Deployment descriptor - web.xml
-When we create a servlet - we create a normal class which extends HttpServlet class
-Mapping can also be done using Annotations instead of web.xml file


--------------------Eclipse Setup & Tour
-Perspective


--------------------Configure Tomcat in Eclipse


--------------------Eclipse & Tomcat Setup on Windows


--------------------Creating Web Project in Eclipse
-ServletDemo Project


--------------------Create Servlet & Web.xml
-action attribute in html
-query string
-service method
-HttpServlet and package in which it is defined - jakarta.servlet.http.HttpServlet
-HttpServletRequest & HttpServletResponse interfaces
-AddServlet.java, web.xml and Index.html in ServletDemo Project


--------------------GET & POST Method
-By default http protocols method is GET method
-GET (for fetching the data), POST (for submitting the data), PUT, DELETE, PATCH, OPTIONS etc. methods
-GET - Data in URL,  but POST will not push data to URL (query string)
-doPost and doGet methods instead of service method


--------------------RequestDispatcher | Calling a Servlet from Servlet
-AddServlet.java, SquareServlet.java, web.xml and Index.html in ServletDemo Project
-To call a servlet from servlet we have these options - 'RequestDispatcher' and 'Redirect'
-Session Management concept
-getParameter method


--------------------HttpServletRequest & HttpServletResponse
-Servlet lifecycle - init, service and destroy
-ServletDemo Project


--------------------RequestDispatcher & sendRedirect Theory
-sendRedirect method
-ServletDemo Project


--------------------SendRedirect | URL Rewriting
-ServletDemo Project


--------------------HttpSession | Cookie
-To maintain a session/data throughout the session, done by tomcat server here
-Session vs cookies
-ServletDemo Project


--------------------ServletConfig & ServletContext
-Both are interfaces
-ServletDemo Project - MyServlet file
-Servlet context data can be shared by all the Servlets
-For different Configuration for different servlets - use ServletConfig


--------------------Servlet Annotation Configuration
-ServletDemo Project
-@WebServlet Annotation


--------------------Why JSP ?
-Java code in the html
-Java Server Pages
-implicit object in JSP
-Delimeters


--------------------How JSP Translated into Servlets ?
-Servlet can not run jsp
-JSP gets converted into servlet which is run by server
-Demo.jsp ---> DemoJsp Servlet (internal Conversion)
<% ...java code here... %> is called  - Scriptlet tag
<%! ...java variables declarations... %> is called - Declaration tag
<%@ page import = "" %> is called Directive tag
<%= ...variable name... %> is called Expression tag (to print something)


--------------------JSP to Servlet Conversion | Netbeans
-mavenproject1 Project


--------------------JSP Tags | Scriptlet | Declaration | Directive | Expression
-mavenproject1 Project


--------------------JSP Directive | Page | Include | Taglib
-Import is the only tag which can be used multiple times in directives
-@page (importing package, langauge info etc.), @include (to include other jsp page into the current page), @taglib (to use external tags, i.e. from spring framework)
- <%@ page attribute="value" attribute="value" ...%>
    e.g.
        language="scripting langauge"
        extends="className"
        import="importList"
        session="true|false"
        autoFlush="true|false"
        contentType="ctInfo"
        errorPage="error_url"
        isErrorPage="true|false"
        info="information"
        isELIgnored="true|false"
        isThreadSafe="true|false"
- <%@ include file="filename"%>
- <%@taglib uri = "uri" prefix="fx" %>
    <fx:avinash> custom tag mentioned in imported tag library
    <fx:h1> custome h1 tag


--------------------Implicit Object in JSP
-Builtin Object (can be used in Scriptlet and Expression)
-Request (HttpServletRequest)
-Response (HttpServletResponse)
-PageContext (PageContext) --- refers to the page --- Scope is same page
-Out (JspWriter) ~ PrintWriter Object
-Session (HttpSession)
-Application (ServletContext)
-Config (ServletConfig)
-JSPDemo Project


--------------------Exception Handling in JSP
-exception object can be used with isErrorPage attribute only


--------------------JDBC in JSP
-JSPLearning


--------------------MVC Using Servlet & JSP
-MVC - Model, View & Controller
-We should not write business logic in JSP
-So use servlets for business logic, JSP for View (e.g. - layout)
-Client -> Request to -> Controller(servlet)(calls a service(uses/take helps of DAO) method for business logic operations) -> Returns a View(JSP) (View uses Model(PoJo - plain old java object) and replaces variables) to client
-N-Tier Architecture


--------------------JSTL Tutorial Part 1 EL
-JSTL - Java Server Pages Standard Tag library
-LearningJSTL Project
-EL - Expression langauge --- ${label}


--------------------JSTL Tutorial Part 2 Core Tags
-LearningJSTL Project
-To use the objects inside JSP page, we need to use Beans, for that we use getters and setters


--------------------JSTL Tutorial SQL Tags Part 1
-LearningJSTL Project


--------------------JSTL Tutorial SQL Tags Part 2
-LearningJSTL Project


--------------------JSTL Tutorial Function Tags
-LearningJSTL Project


--------------------Servlet Filter Tutorial Theory
-Servlet 3 filters
    1. F1 - for logging purpose
    2. F2 - for transactions purpose
    3. F3 - for Security purpose
-Filter Chaining
-Web.xml handles which filter to go with
-init, doFilter, destroy methods
-FilterConfig - for configuration of filter


--------------------Servlet Filter Practical
-ServletFilterDemo


--------------------Login Using Servlet & JSP
-Uses HttpSession for login task
-LoginServlet Project


--------------------How to Prevent Back Button after Logout Part 1


--------------------How to Prevent Back Button after Logout Part 2


--------------------Login Using Servlet & JSP | JDBC Part 3


--------------------Servlet | JSP | JDBC | Maven Example


--------------------File Upload in Java Servlet